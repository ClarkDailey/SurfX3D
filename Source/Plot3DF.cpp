//	<><><><><><><><><><><><><>  Plot3DF.cpp  <><><><><><><><><><><><><><>
//		
// ----------------------------------------------------
// (C) Copyright Clark Dailey, Inc. 2006
//
// Implementation of Plot3DF C++ class
//
// --------------------------------------------------------------------------
//

#include "stdafx.h"	// precompiled header
#include <stdio.h>
#include "Plot3DF.h"
#include "SurfX3D.h"

//#define DEBUG_HISTOGRAM 1

// ------------------------------------------------------------
//    Look-Up-Tables for Triangulation
// ------------------------------------------------------------
#define NCUBE_COMBOS		256
#define NCUBE_LINES			12
#define NCUBE_VERTEX		8

typedef struct cpoint_s
{
	double x;
	double y;
	double z;
} CPOINT;

CPOINT g_cubeVertex[NCUBE_VERTEX+1] =
{
	{   0.,  0.,  0.  },	// --
	{  -1., -1.,  1.  },	// V1
	{   1., -1.,  1.  },	// V2
	{   1.,  1.,  1.  },	// V3
	{  -1.,  1.,  1.  },	// V4
	{  -1., -1., -1.  },	// V5
	{   1., -1., -1.  },	// V6
	{   1.,  1., -1.  },	// V7
	{  -1.,  1., -1.  },	// V8
};


typedef struct cube_line_s
{
	int vertex1;
	int vertex2;
} CUBE_LINE;

CUBE_LINE g_cubeLine[NCUBE_LINES+1] =
{
	{  0,  0 },	// --
	{  1,  2 },	// L1
	{  2,  3 },	// L2
	{  3,  4 },	// L3
	{  4,  1 },	// L4
	{  5,  6 },	// L5
	{  6,  7 },	// L6
	{  7,  8 },	// L7
	{  5,  8 },	// L8
	{  1,  5 },	// L9
	{  2,  6 },	// L10
	{  3,  7 },	// L11
	{  4,  8 },	// L12
};


typedef struct cube_data_s
{
	unsigned int index;		// 0-255
	unsigned int type;		// cube type (number of points separated by cutting plane)
	unsigned int subType;	// cube sub-type
	unsigned int lineCount;	// number of lines intersected by cutting plane
	unsigned int triangType;
	unsigned int lineNo[NCUBE_LINES];
} CUBE_DATA;


// cube type
#define CUBET(type,subtype,count,ntriang)  (type),(subtype),(count),(ntriang)
#define NCUBE_TYPES 15	// number of types

#define TYPE_0A	 CUBET(0,1, 0, 0)	//  2 occurances in g_cubeData[] table
#define TYPE_1A	 CUBET(1,1, 3, 1)	// 16
#define TYPE_2A	 CUBET(2,1, 4, 2)	// 24
#define TYPE_2B	 CUBET(2,2, 6, 3)	// 24
#define TYPE_2C	 CUBET(2,3, 6, 4)	// 	8
#define TYPE_3A	 CUBET(3,1, 5, 5)	// 48
#define TYPE_3B	 CUBET(3,2, 7, 6)	// 48
#define TYPE_3C	 CUBET(3,3, 9, 7)	// 16
#define TYPE_4A	 CUBET(4,1, 4, 8)	// 	6
#define TYPE_4B	 CUBET(4,2, 6, 9)	// 	8
#define TYPE_4C	 CUBET(4,3,12,10)	// 	2
#define TYPE_4D	 CUBET(4,4, 8,11)	// 24
#define TYPE_4E	 CUBET(4,5, 8,12)	// 	6
#define TYPE_4F	 CUBET(4,6, 6,13)	// 12
#define TYPE_4G	 CUBET(4,7, 6,14)	// 12

#define MAX_TRIANGLES_PER_ITEM	(5)
#define MAX_TRIANG_POINTS	(MAX_TRIANGLES_PER_ITEM*3)

typedef struct triangle_data_s
{
	unsigned int nTriangles;
	unsigned int pointIndex[MAX_TRIANG_POINTS];
}	TRIANG_DATA;

TRIANG_DATA g_triangleData[NCUBE_TYPES] =
{
	// #   T1      T2     T3     T4    T5
    {  0, 0,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,0   }, //  0A   0
    {  1, 0,1,2, 0,0,0, 0,0,0, 0,0,0, 0,0,0   }, //  1A   1
    {  2, 0,1,2, 2,3,0, 0,0,0, 0,0,0, 0,0,0   }, //  2A   2
    {  4, 0,1,2, 2,3,0, 3,4,0, 4,5,0, 0,0,0   }, //  2B   3
    {  2, 0,1,2, 3,4,5, 0,0,0, 0,0,0, 0,0,0   }, //  2C   4
    {  3, 0,1,2, 2,3,0, 3,4,0, 0,0,0, 0,0,0   }, //  3A   5
    {  5, 0,1,2, 2,3,0, 4,5,6, 6,0,4, 0,0,0   }, //  3B   6 
    {  4, 0,1,2, 3,4,5, 5,6,3, 6,7,3, 7,8,3   }, //  3C   7
    {  2, 0,1,2, 2,3,0, 0,0,0, 0,0,0, 0,0,0   }, //  4A   8
    {  4, 0,1,2, 2,3,4, 4,5,2, 5,0,2, 0,0,0   }, //  4B   9
    {  3, 0,1,2, 3,4,5, 6,7,8, 9,10,11, 0,0,0 }, //  4C  10
    {  4, 0,1,2, 3,4,5, 5,6,3, 6,7,3, 0,0,0   }, //  4D  11
    {  4, 0,1,2, 2,3,0, 4,5,6, 6,7,4, 0,0,0   }, //  4E  12
    {  4, 0,1,2, 2,3,0, 3,4,0, 4,5,0, 0,0,0   }, //  4F  13
    {  4, 0,1,2, 2,3,0, 3,4,0, 4,5,0, 0,0,0   }, //  4G  14
};

CUBE_DATA g_cubeData[NCUBE_COMBOS] =
{
   //Index, Type,      1   2   3   4   5   6   7   8   9  10  11  12      //  Bits,     AdjBits, Off
    {   0, TYPE_0A,    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},    //  00000000, 00000000,  8  
    {   1, TYPE_1A,    4,  1,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0},    //  00000001, 00000001,  7  
    {   2, TYPE_1A,    1,  2, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0},    //  00000010, 00000010,  7  
    {   3, TYPE_2A,    9,  4,  2, 10,  0,  0,  0,  0,  0,  0,  0,  0},    //  00000011, 00000011,  6  
    {   4, TYPE_1A,    2,  3, 11,  0,  0,  0,  0,  0,  0,  0,  0,  0},    //  00000100, 00000100,  7  
    {   5, TYPE_2B,    9,  4,  3, 11,  2,  1,  0,  0,  0,  0,  0,  0},    //  00000101, 00000101,  6  
    {   6, TYPE_2A,   10,  1,  3, 11,  0,  0,  0,  0,  0,  0,  0,  0},    //  00000110, 00000110,  6  
    {   7, TYPE_3A,    9,  4,  3, 11, 10,  0,  0,  0,  0,  0,  0,  0},    //  00000111, 00000111,  5  
    {   8, TYPE_1A,    3,  4, 12,  0,  0,  0,  0,  0,  0,  0,  0,  0},    //  00001000, 00001000,  7  
    {   9, TYPE_2A,   12,  3,  1,  9,  0,  0,  0,  0,  0,  0,  0,  0},    //  00001001, 00001001,  6  
    {  10, TYPE_2B,   10,  1,  4, 12,  3,  2,  0,  0,  0,  0,  0,  0},    //  00001010, 00001010,  6  
    {  11, TYPE_3A,   12,  3,  2, 10,  9,  0,  0,  0,  0,  0,  0,  0},    //  00001011, 00001011,  5  
    {  12, TYPE_2A,   11,  2,  4, 12,  0,  0,  0,  0,  0,  0,  0,  0},    //  00001100, 00001100,  6  
    {  13, TYPE_3A,   11,  2,  1,  9, 12,  0,  0,  0,  0,  0,  0,  0},    //  00001101, 00001101,  5
    {  14, TYPE_3A,   10,  1,  4, 12, 11,  0,  0,  0,  0,  0,  0,  0},    //  00001110, 00001110,  5  
    {  15, TYPE_4A,    9, 10, 11, 12,  0,  0,  0,  0,  0,  0,  0,  0},    //  00001111, 00001111,  4  
    {  16, TYPE_1A,    5,  8,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0},    //  00010000, 00010000,  7  
    {  17, TYPE_2A,    4,  1,  5,  8,  0,  0,  0,  0,  0,  0,  0,  0},    //  00010001, 00010001,  6  
    {  18, TYPE_2B,    2, 10,  5,  8,  9,  1,  0,  0,  0,  0,  0,  0},    //  00010010, 00010010,  6  
    {  19, TYPE_3A,    2, 10,  5,  8,  4,  0,  0,  0,  0,  0,  0,  0},    //  00010011, 00010011,  5  
    {  20, TYPE_2C,   11,  2,  3,  9,  5,  8,  0,  0,  0,  0,  0,  0},    //  00010100, 00010100,  6  
    {  21, TYPE_3B,   11,  2,  1,  5,  8,  4,  3,  0,  0,  0,  0,  0},    //  00010101, 00010101,  5  
    {  22, TYPE_3B,    8,  9,  1,  3, 11, 10,  5,  0,  0,  0,  0,  0},    //  00010110, 00010110,  5  
    {  23, TYPE_4G,    5, 10, 11,  3,  4,  8,  0,  0,  0,  0,  0,  0},    //  00010111, 00010111,  4  
    {  24, TYPE_2B,    3,  4,  9,  5,  8, 12,  0,  0,  0,  0,  0,  0},    //  00011000, 00011000,  6  
    {  25, TYPE_3A,    5,  8, 12,  3,  1,  0,  0,  0,  0,  0,  0,  0},    //  00011001, 00011001,  5  
    {  26, TYPE_3C,    4,  1,  9,  3,  2, 10,  5,  8, 12,  0,  0,  0},    //  00011010, 00011010,  5  
    {  27, TYPE_4B,    3,  2, 10,  5,  8, 12,  0,  0,  0,  0,  0,  0},    //  00011011, 00011011,  4  
    {  28, TYPE_3B,    5,  8, 12, 11,  2,  4,  9,  0,  0,  0,  0,  0},    //  00011100, 00011100,  5  
    {  29, TYPE_4F,    8, 12, 11,  2,  1,  5,  0,  0,  0,  0,  0,  0},    //  00011101, 00011101,  4  
    {  30, TYPE_4D,    4,  1,  9,  8, 12, 11, 10,  5,  0,  0,  0,  0},    //  00011110, 00011110,  4  
    {  31, TYPE_3A,   12,  8,  5, 10, 11,  0,  0,  0,  0,  0,  0,  0},    //  00011111, 11100000,  5 
    {  32, TYPE_1A,    5, 10,  6,  0,  0,  0,  0,  0,  0,  0,  0,  0},    //  00100000, 00100000,  7  
    {  33, TYPE_2B,    4,  1, 10,  6,  5,  9,  0,  0,  0,  0,  0,  0},    //  00100001, 00100001,  6  
    {  34, TYPE_2A,    1,  2,  6,  5,  0,  0,  0,  0,  0,  0,  0,  0},    //  00100010, 00100010,  6  
    {  35, TYPE_3A,    6,  5,  9,  4,  2,  0,  0,  0,  0,  0,  0,  0},    //  00100011, 00100011,  5  
    {  36, TYPE_2B,    3, 11,  6,  5, 10,  2,  0,  0,  0,  0,  0,  0},    //  00100100, 00100100,  6  
    {  37, TYPE_3C,    1,  2, 10,  4,  3, 11,  6,  5,  9,  0,  0,  0},    //  00100101, 00100101,  5  
    {  38, TYPE_3A,    3, 11,  6,  5,  1,  0,  0,  0,  0,  0,  0,  0},    //  00100110, 00100110,  5  
    {  39, TYPE_4B,    4,  3, 11,  6,  5,  9,  0,  0,  0,  0,  0,  0},    //  00100111, 00100111,  4  
    {  40, TYPE_2C,   12,  3,  4, 10,  6,  5,  0,  0,  0,  0,  0,  0},    //  00101000, 00101000,  6  
    {  41, TYPE_3B,    6,  5,  9, 12,  3,  1, 10,  0,  0,  0,  0,  0},    //  00101001, 00101001,  5  
    {  42, TYPE_3B,   12,  3,  2,  6,  5,  1,  4,  0,  0,  0,  0,  0},    //  00101010, 00101010,  5  
    {  43, TYPE_4F,    5,  9, 12,  3,  2,  6,  0,  0,  0,  0,  0,  0},    //  00101011, 00101011,  4  
    {  44, TYPE_3B,    5, 10,  2,  4, 12, 11,  6,  0,  0,  0,  0,  0},    //  00101100, 00101100,  5  
    {  45, TYPE_4D,    1,  2, 10,  5,  9, 12, 11,  6,  0,  0,  0,  0},    //  00101101, 00101101,  4  
    {  46, TYPE_4G,    6, 11, 12,  4,  1,  5,  0,  0,  0,  0,  0,  0},    //  00101110, 00101110,  4  
    {  47, TYPE_3A,    9,  5,  6, 11, 12,  0,  0,  0,  0,  0,  0,  0},    //  00101111, 11010000,  5 
    {  48, TYPE_2A,    8,  9, 10,  6,  0,  0,  0,  0,  0,  0,  0,  0},    //  00110000, 00110000,  6  
    {  49, TYPE_3A,    4,  1, 10,  6,  8,  0,  0,  0,  0,  0,  0,  0},    //  00110001, 00110001,  5  
    {  50, TYPE_3A,    8,  9,  1,  2,  6,  0,  0,  0,  0,  0,  0,  0},    //  00110010, 00110010,  5  
    {  51, TYPE_4A,    2,  4,  8,  6,  0,  0,  0,  0,  0,  0,  0,  0},    //  00110011, 00110011,  4  
    {  52, TYPE_3B,    3, 11,  6,  8,  9, 10,  2,  0,  0,  0,  0,  0},    //  00110100, 00110100,  5  
    {  53, TYPE_4D,   10,  1,  2, 11,  6,  8,  4,  3,  0,  0,  0,  0},    //  00110101, 00110101,  4  
    {  54, TYPE_4F,    9,  1,  3, 11,  6,  8,  0,  0,  0,  0,  0,  0},    //  00110110, 00110110,  4
    {  55, TYPE_3A,    6, 11,  3,  4,  8,  0,  0,  0,  0,  0,  0,  0},    //  00110111, 11001000,  5 
    {  56, TYPE_3B,    3,  4,  9, 10,  6,  8, 12,  0,  0,  0,  0,  0},    //  00111000, 00111000,  5  
    {  57, TYPE_4G,   12,  8,  6, 10,  1,  3,  0,  0,  0,  0,  0,  0},    //  00111001, 00111001,  4  
    {  58, TYPE_4D,    1,  9,  4,  3,  2,  6,  8, 12,  0,  0,  0,  0},    //  00111010, 00111010,  4  
    {  59, TYPE_3A,    2,  3, 12,  8,  6,  0,  0,  0,  0,  0,  0,  0},    //  00111011, 11000100,  5 
    {  60, TYPE_4E,    2, 10,  9,  4, 11, 12,  8,  6,  0,  0,  0,  0},    //  00111100, 00111100,  4  
    {  61, TYPE_3B,    1,  2, 11, 12,  8,  6, 10,  0,  0,  0,  0,  0},    //  00111101, 11000010,  5 
    {  62, TYPE_3B,    1,  9,  8,  6, 11, 12,  4,  0,  0,  0,  0,  0},    //  00111110, 11000001,  5 
    {  63, TYPE_2A,    6, 11, 12,  8,  0,  0,  0,  0,  0,  0,  0,  0},    //  00111111, 11000000,  6 
    {  64, TYPE_1A,    6, 11,  7,  0,  0,  0,  0,  0,  0,  0,  0,  0},    //  01000000, 01000000,  7  
    {  65, TYPE_2C,    9,  4,  1, 11,  7,  6,  0,  0,  0,  0,  0,  0},    //  01000001, 01000001,  6  
    {  66, TYPE_2B,    1,  2, 11,  7,  6, 10,  0,  0,  0,  0,  0,  0},    //  01000010, 01000010,  6  
    {  67, TYPE_3B,    7,  6, 10,  9,  4,  2, 11,  0,  0,  0,  0,  0},    //  01000011, 01000011,  5  
    {  68, TYPE_2A,    2,  3,  7,  6,  0,  0,  0,  0,  0,  0,  0,  0},    //  01000100, 01000100,  6  
    {  69, TYPE_3B,    9,  4,  3,  7,  6,  2,  1,  0,  0,  0,  0,  0},    //  01000101, 01000101,  5  
    {  70, TYPE_3A,    7,  6, 10,  1,  3,  0,  0,  0,  0,  0,  0,  0},    //  01000110, 01000110,  5  
    {  71, TYPE_4F,    6, 10,  9,  4,  3,  7,  0,  0,  0,  0,  0,  0},    //  01000111, 01000111,  4  
    {  72, TYPE_2B,    4, 12,  7,  6, 11,  3,  0,  0,  0,  0,  0,  0},    //  01001000, 01001000,  6  
    {  73, TYPE_3B,    6, 11,  3,  1,  9, 12,  7,  0,  0,  0,  0,  0},    //  01001001, 01001001,  5  
    {  74, TYPE_3C,    2,  3, 11,  1,  4, 12,  7,  6, 10,  0,  0,  0},    //  01001010, 01001010,  5  
    {  75, TYPE_4D,    2,  3, 11,  6, 10,  9, 12,  7,  0,  0,  0,  0},    //  01001011, 01001011,  4  
	{  76, TYPE_3A,    4, 12,  7,  6,  2,  0,  0,  0,  0,  0,  0,  0},    //  01001100, 01001100,  5  
    {  77, TYPE_4G,    7, 12,  9,  1,  2,  6,  0,  0,  0,  0,  0,  0},    //  01001101, 01001101,  4  
    {  78, TYPE_4B,    1,  4, 12,  7,  6, 10,  0,  0,  0,  0,  0,  0},    //  01001110, 01001110,  4  
    {  79, TYPE_3A,   10,  6,  7, 12,  9,  0,  0,  0,  0,  0,  0,  0},    //  01001111, 10110000,  5 
    {  80, TYPE_2B,    9,  5,  6, 11,  7,  8,  0,  0,  0,  0,  0,  0},    //  01010000, 01010000,  6  
    {  81, TYPE_3B,   11,  7,  8,  4,  1,  5,  6,  0,  0,  0,  0,  0},    //  01010001, 01010001,  5  
    {  82, TYPE_3C,    5, 10,  6,  9,  1,  2, 11,  7,  8,  0,  0,  0},    //  01010010, 01010010,  5  
    {  83, TYPE_4D,    5, 10,  6,  7,  8,  4,  2, 11,  0,  0,  0,  0},    //  01010011, 01010011,  4  
    {  84, TYPE_3B,    9,  5,  6,  2,  3,  7,  8,  0,  0,  0,  0,  0},    //  01010100, 01010100,  5  
    {  85, TYPE_4E,    1,  2,  6,  5,  4,  8,  7,  3,  0,  0,  0,  0},    //  01010101, 01010101,  4  
    {  86, TYPE_4D,   10,  6,  5,  9,  1,  3,  7,  8,  0,  0,  0,  0},    //  01010110, 01010110,  4  
    {  87, TYPE_3B,   10,  6,  7,  3,  4,  8,  5,  0,  0,  0,  0,  0},    //  01010111, 10101000,  5 
    {  88, TYPE_3C,    8,  7, 12,  5,  6, 11,  3,  4,  9,  0,  0,  0},    //  01011000, 01011000,  5  
    {  89, TYPE_4D,   12,  8,  7, 11,  3,  1,  5,  6,  0,  0,  0,  0},    //  01011001, 01011001,  4  
    {  90, TYPE_4C,    4,  1,  9,  2,  3, 11, 10,  6,  5,  8,  7, 12},    //  01011010, 01011010,  4  
    {  91, TYPE_3C,    6, 11,  7, 10,  2,  3, 12,  8,  5,  0,  0,  0},    //  01011011, 10100100,  5
    {  92, TYPE_4D,    7, 12,  8,  5,  6,  2,  4,  9,  0,  0,  0,  0},    //  01011100, 01011100,  4  
    {  93, TYPE_3B,   12,  8,  5,  1,  2,  6,  7,  0,  0,  0,  0,  0},    //  01011101, 10100010,  5 
    {  94, TYPE_3C,    9,  5,  8,  1, 10,  6,  7, 12,  4,  0,  0,  0},    //  01011110, 10100001,  5 
    {  95, TYPE_2B,   10,  6,  7, 12,  8,  5,  0,  0,  0,  0,  0,  0},    //  01011111, 10100000,  6 
    {  96, TYPE_2A,    5, 10, 11,  7,  0,  0,  0,  0,  0,  0,  0,  0},    //  01100000, 01100000,  6  
    {  97, TYPE_3B,    4,  1, 10, 11,  7,  5,  9,  0,  0,  0,  0,  0},    //  01100001, 01100001,  5  
    {  98, TYPE_3A,    1,  2, 11,  7,  5,  0,  0,  0,  0,  0,  0,  0},    //  01100010, 01100010,  5  
    {  99, TYPE_4G,   11,  2,  4,  9,  5,  7,  0,  0,  0,  0,  0,  0},    //  01100011, 01100011,  4  
    { 100, TYPE_3A,    5, 10,  2,  3,  7,  0,  0,  0,  0,  0,  0,  0},    //  01100100, 01100100,  5  
    { 101, TYPE_4D,    2, 10,  1,  4,  3,  7,  5,  9,  0,  0,  0,  0},    //  01100101, 01100101,  4  
    { 102, TYPE_4A,    1,  5,  7,  3,  0,  0,  0,  0,  0,  0,  0,  0},    //  01100110, 01100110,  4  
    { 103, TYPE_3A,    3,  4,  9,  5,  7,  0,  0,  0,  0,  0,  0,  0},    //  01100111, 10011000,  5 
    { 104, TYPE_3B,    4, 12,  7,  5, 10, 11,  3,  0,  0,  0,  0,  0},    //  01101000, 01101000,  5  
    { 105, TYPE_4E,   10,  1,  3, 11,  5,  7, 12,  9,  0,  0,  0,  0},    //  01101001, 01101001,  4  
    { 106, TYPE_4D,   11,  2,  3, 12,  7,  5,  1,  4,  0,  0,  0,  0},    //  01101010, 01101010,  4  
    { 107, TYPE_3B,    2,  3, 12,  9,  5,  7, 11,  0,  0,  0,  0,  0},    //  01101011, 10010100,  5 
    { 108, TYPE_4F,   10,  2,  4, 12,  7,  5,  0,  0,  0,  0,  0,  0},    //  01101100, 01101100,  4  
	{ 109, TYPE_3B,    2, 10,  5,  7, 12,  9,  1,  0,  0,  0,  0,  0},    //  01101101, 10010010,  5 
    { 110, TYPE_3A,    7, 12,  4,  1,  5,  0,  0,  0,  0,  0,  0,  0},    //  01101110, 10010001,  5 
    { 111, TYPE_2A,    9,  5,  7, 12,  0,  0,  0,  0,  0,  0,  0,  0},    //  01101111, 10010000,  6 
    { 112, TYPE_3A,   11,  7,  8,  9, 10,  0,  0,  0,  0,  0,  0,  0},    //  01110000, 01110000,  5  
    { 113, TYPE_4F,    1, 10, 11,  7,  8,  4,  0,  0,  0,  0,  0,  0},    //  01110001, 01110001,  4  
    { 114, TYPE_4B,    9,  1,  2, 11,  7,  8,  0,  0,  0,  0,  0,  0},    //  01110010, 01110010,  4  
    { 115, TYPE_3A,    8,  7, 11,  2,  4,  0,  0,  0,  0,  0,  0,  0},    //  01110011, 10001100,  5 
    { 116, TYPE_4G,    2, 10,  9,  8,  7,  3,  0,  0,  0,  0,  0,  0},    //  01110100, 01110100,  4  
    { 117, TYPE_3B,   10,  1,  4,  8,  7,  3,  2,  0,  0,  0,  0,  0},    //  01110101, 10001010,  5 
    { 118, TYPE_3A,    1,  9,  8,  7,  3,  0,  0,  0,  0,  0,  0,  0},    //  01110110, 10001001,  5 
    { 119, TYPE_2A,    3,  4,  8,  7,  0,  0,  0,  0,  0,  0,  0,  0},    //  01110111, 10001000,  6 
    { 120, TYPE_4D,    8,  7, 12,  4,  9, 10, 11,  3,  0,  0,  0,  0},    //  01111000, 01111000,  4  
    { 121, TYPE_3B,    8,  7, 11, 10,  1,  3, 12,  0,  0,  0,  0,  0},    //  01111001, 10000110,  5 
    { 122, TYPE_3C,    3,  4, 12,  2,  1,  9,  8,  7, 11,  0,  0,  0},    //  01111010, 10000101,  5 
    { 123, TYPE_2B,    2,  3, 12,  8,  7, 11,  0,  0,  0,  0,  0,  0},    //  01111011, 10000100,  6 
    { 124, TYPE_3B,    7, 12,  4,  2, 10,  9,  8,  0,  0,  0,  0,  0},    //  01111100, 10000011,  5 
    { 125, TYPE_2C,    1,  2, 10,  7, 12,  8,  0,  0,  0,  0,  0,  0},    //  01111101, 10000010,  6 
    { 126, TYPE_2B,    1,  9,  8,  7, 12,  4,  0,  0,  0,  0,  0,  0},    //  01111110, 10000001,  6 
    { 127, TYPE_1A,    7, 12,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0},    //  01111111, 10000000,  7 
    { 128, TYPE_1A,    7, 12,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0},    //  10000000, 10000000,  7  
    { 129, TYPE_2B,    1,  9,  8,  7, 12,  4,  0,  0,  0,  0,  0,  0},    //  10000001, 10000001,  6  
    { 130, TYPE_2C,    1,  2, 10,  7, 12,  8,  0,  0,  0,  0,  0,  0},    //  10000010, 10000010,  6  
    { 131, TYPE_3B,    7, 12,  4,  2, 10,  9,  8,  0,  0,  0,  0,  0},    //  10000011, 10000011,  5  
    { 132, TYPE_2B,    2,  3, 12,  8,  7, 11,  0,  0,  0,  0,  0,  0},    //  10000100, 10000100,  6  
    { 133, TYPE_3C,    3,  4, 12,  2,  1,  9,  8,  7, 11,  0,  0,  0},    //  10000101, 10000101,  5  
    { 134, TYPE_3B,    8,  7, 11, 10,  1,  3, 12,  0,  0,  0,  0,  0},    //  10000110, 10000110,  5  
    { 135, TYPE_4D,    8,  7, 12,  4,  9, 10, 11,  3,  0,  0,  0,  0},    //  10000111, 01111000,  4 
    { 136, TYPE_2A,    3,  4,  8,  7,  0,  0,  0,  0,  0,  0,  0,  0},    //  10001000, 10001000,  6  
    { 137, TYPE_3A,    1,  9,  8,  7,  3,  0,  0,  0,  0,  0,  0,  0},    //  10001001, 10001001,  5  
    { 138, TYPE_3B,   10,  1,  4,  8,  7,  3,  2,  0,  0,  0,  0,  0},    //  10001010, 10001010,  5  
    { 139, TYPE_4G,    2, 10,  9,  8,  7,  3,  0,  0,  0,  0,  0,  0},    //  10001011, 01110100,  4 
    { 140, TYPE_3A,    8,  7, 11,  2,  4,  0,  0,  0,  0,  0,  0,  0},    //  10001100, 10001100,  5  
    { 141, TYPE_4B,    9,  1,  2, 11,  7,  8,  0,  0,  0,  0,  0,  0},    //  10001101, 01110010,  4 
    { 142, TYPE_4F,    1, 10, 11,  7,  8,  4,  0,  0,  0,  0,  0,  0},    //  10001110, 01110001,  4 
    { 143, TYPE_3A,   11,  7,  8,  9, 10,  0,  0,  0,  0,  0,  0,  0},    //  10001111, 01110000,  5 
    { 144, TYPE_2A,    9,  5,  7, 12,  0,  0,  0,  0,  0,  0,  0,  0},    //  10010000, 10010000,  6  
    { 145, TYPE_3A,    7, 12,  4,  1,  5,  0,  0,  0,  0,  0,  0,  0},    //  10010001, 10010001,  5  
	{ 146, TYPE_3B,    2, 10,  5,  7, 12,  9,  1,  0,  0,  0,  0,  0},    //  10010010, 10010010,  5  
    { 147, TYPE_4F,   10,  2,  4, 12,  7,  5,  0,  0,  0,  0,  0,  0},    //  10010011, 01101100,  4 
    { 148, TYPE_3B,    2,  3, 12,  9,  5,  7, 11,  0,  0,  0,  0,  0},    //  10010100, 10010100,  5  
    { 149, TYPE_4D,   11,  2,  3, 12,  7,  5,  1,  4,  0,  0,  0,  0},    //  10010101, 01101010,  4 
    { 150, TYPE_4E,   10,  1,  3, 11,  5,  7, 12,  9,  0,  0,  0,  0},    //  10010110, 01101001,  4 
    { 151, TYPE_3B,    4, 12,  7,  5, 10, 11,  3,  0,  0,  0,  0,  0},    //  10010111, 01101000,  5 
    { 152, TYPE_3A,    3,  4,  9,  5,  7,  0,  0,  0,  0,  0,  0,  0},    //  10011000, 10011000,  5  
    { 153, TYPE_4A,    1,  3,  7,  5,  0,  0,  0,  0,  0,  0,  0,  0},    //  10011001, 01100110,  4 
    { 154, TYPE_4D,    2, 10,  1,  4,  3,  7,  5,  9,  0,  0,  0,  0},    //  10011010, 01100101,  4 
    { 155, TYPE_3A,    5, 10,  2,  3,  7,  0,  0,  0,  0,  0,  0,  0},    //  10011011, 01100100,  5 
    { 156, TYPE_4G,   11,  2,  4,  9,  5,  7,  0,  0,  0,  0,  0,  0},    //  10011100, 01100011,  4 
    { 157, TYPE_3A,    1,  2, 11,  7,  5,  0,  0,  0,  0,  0,  0,  0},    //  10011101, 01100010,  5 
    { 158, TYPE_3B,    4,  1, 10, 11,  7,  5,  9,  0,  0,  0,  0,  0},    //  10011110, 01100001,  5 
    { 159, TYPE_2A,    5, 10, 11,  7,  0,  0,  0,  0,  0,  0,  0,  0},    //  10011111, 01100000,  6 
    { 160, TYPE_2B,   10,  6,  7, 12,  8,  5,  0,  0,  0,  0,  0,  0},    //  10100000, 10100000,  6  
    { 161, TYPE_3C,    9,  5,  8,  1, 10,  6,  7, 12,  4,  0,  0,  0},    //  10100001, 10100001,  5  
    { 162, TYPE_3B,   12,  8,  5,  1,  2,  6,  7,  0,  0,  0,  0,  0},    //  10100010, 10100010,  5  
    { 163, TYPE_4D,    7, 12,  8,  5,  6,  2,  4,  9,  0,  0,  0,  0},    //  10100011, 01011100,  4 
	{ 164, TYPE_3C,    6, 11,  7, 10,  2,  3, 12,  8,  5,  0,  0,  0},    //  10100100, 10100100,  5
    { 165, TYPE_4C,    4,  1,  9,  2,  3, 11, 10,  6,  5,  8,  7, 12},    //  10100101, 01011010,  4 
    { 166, TYPE_4D,   12,  8,  7, 11,  3,  1,  5,  6,  0,  0,  0,  0},    //  10100110, 01011001,  4 
    { 167, TYPE_3C,    8,  7, 12,  5,  6, 11,  3,  4,  9,  0,  0,  0},    //  10100111, 01011000,  5 
    { 168, TYPE_3B,   10,  6,  7,  3,  4,  8,  5,  0,  0,  0,  0,  0},    //  10101000, 10101000,  5  
    { 169, TYPE_4D,   10,  6,  5,  9,  1,  3,  7,  8,  0,  0,  0,  0},    //  10101001, 01010110,  4 
    { 170, TYPE_4E,    1,  2,  6,  5,  4,  8,  7,  3,  0,  0,  0,  0},    //  10101010, 01010101,  4 
    { 171, TYPE_3B,    9,  5,  6,  2,  3,  7,  8,  0,  0,  0,  0,  0},    //  10101011, 01010100,  5 
    { 172, TYPE_4D,    5, 10,  6,  7,  8,  4,  2, 11,  0,  0,  0,  0},    //  10101100, 01010011,  4 
    { 173, TYPE_3C,    5, 10,  6,  9,  1,  2, 11,  7,  8,  0,  0,  0},    //  10101101, 01010010,  5 
    { 174, TYPE_3B,   11,  7,  8,  4,  1,  5,  6,  0,  0,  0,  0,  0},    //  10101110, 01010001,  5 
    { 175, TYPE_2B,    9,  5,  6, 11,  7,  8,  0,  0,  0,  0,  0,  0},    //  10101111, 01010000,  6 
    { 176, TYPE_3A,   10,  6,  7, 12,  9,  0,  0,  0,  0,  0,  0,  0},    //  10110000, 10110000,  5  
    { 177, TYPE_4B,    1,  4, 12,  7,  6, 10,  0,  0,  0,  0,  0,  0},    //  10110001, 01001110,  4 
    { 178, TYPE_4G,    7, 12,  9,  1,  2,  6,  0,  0,  0,  0,  0,  0},    //  10110010, 01001101,  4 
	{ 179, TYPE_3A,    4, 12,  7,  6,  2,  0,  0,  0,  0,  0,  0,  0},    //  10110011, 01001100,  5 
    { 180, TYPE_4D,    2,  3, 11,  6, 10,  9, 12,  7,  0,  0,  0,  0},    //  10110100, 01001011,  4 
    { 181, TYPE_3C,    2,  3, 11,  1,  4, 12,  7,  6, 10,  0,  0,  0},    //  10110101, 01001010,  5 
    { 182, TYPE_3B,    6, 11,  3,  1,  9, 12,  7,  0,  0,  0,  0,  0},    //  10110110, 01001001,  5 
    { 183, TYPE_2B,    4, 12,  7,  6, 11,  3,  0,  0,  0,  0,  0,  0},    //  10110111, 01001000,  6 
    { 184, TYPE_4F,    6, 10,  9,  4,  3,  7,  0,  0,  0,  0,  0,  0},    //  10111000, 01000111,  4 
    { 185, TYPE_3A,    7,  6, 10,  1,  3,  0,  0,  0,  0,  0,  0,  0},    //  10111001, 01000110,  5 
    { 186, TYPE_3B,    9,  4,  3,  7,  6,  2,  1,  0,  0,  0,  0,  0},    //  10111010, 01000101,  5 
    { 187, TYPE_2A,    2,  3,  7,  6,  0,  0,  0,  0,  0,  0,  0,  0},    //  10111011, 01000100,  6 
    { 188, TYPE_3B,    7,  6, 10,  9,  4,  2, 11,  0,  0,  0,  0,  0},    //  10111100, 01000011,  5 
    { 189, TYPE_2B,    1,  2, 11,  7,  6, 10,  0,  0,  0,  0,  0,  0},    //  10111101, 01000010,  6 
    { 190, TYPE_2C,    9,  4,  1, 11,  7,  6,  0,  0,  0,  0,  0,  0},    //  10111110, 01000001,  6 
    { 191, TYPE_1A,    6, 11,  7,  0,  0,  0,  0,  0,  0,  0,  0,  0},    //  10111111, 01000000,  7 
    { 192, TYPE_2A,    6, 11, 12,  8,  0,  0,  0,  0,  0,  0,  0,  0},    //  11000000, 11000000,  6  
    { 193, TYPE_3B,    1,  9,  8,  6, 11, 12,  4,  0,  0,  0,  0,  0},    //  11000001, 11000001,  5  
    { 194, TYPE_3B,    1,  2, 11, 12,  8,  6, 10,  0,  0,  0,  0,  0},    //  11000010, 11000010,  5  
    { 195, TYPE_4E,    2, 10,  9,  4, 11, 12,  8,  6,  0,  0,  0,  0},    //  11000011, 00111100,  4 
    { 196, TYPE_3A,    2,  3, 12,  8,  6,  0,  0,  0,  0,  0,  0,  0},    //  11000100, 11000100,  5  
    { 197, TYPE_4D,    1,  9,  4,  3,  2,  6,  8, 12,  0,  0,  0,  0},    //  11000101, 00111010,  4 
    { 198, TYPE_4G,   12,  8,  6, 10,  1,  3,  0,  0,  0,  0,  0,  0},    //  11000110, 00111001,  4 
    { 199, TYPE_3B,    3,  4,  9, 10,  6,  8, 12,  0,  0,  0,  0,  0},    //  11000111, 00111000,  5 
    { 200, TYPE_3A,    6, 11,  3,  4,  8,  0,  0,  0,  0,  0,  0,  0},    //  11001000, 11001000,  5  
    { 201, TYPE_4F,    9,  1,  3, 11,  6,  8,  0,  0,  0,  0,  0,  0},    //  11001001, 00110110,  4
    { 202, TYPE_4D,   10,  1,  2, 11,  6,  8,  4,  3,  0,  0,  0,  0},    //  11001010, 00110101,  4 
    { 203, TYPE_3B,    3, 11,  6,  8,  9, 10,  2,  0,  0,  0,  0,  0},    //  11001011, 00110100,  5 
    { 204, TYPE_4A,    2,  6,  8,  4,  0,  0,  0,  0,  0,  0,  0,  0},    //  11001100, 00110011,  4 
    { 205, TYPE_3A,    8,  9,  1,  2,  6,  0,  0,  0,  0,  0,  0,  0},    //  11001101, 00110010,  5 
    { 206, TYPE_3A,    4,  1, 10,  6,  8,  0,  0,  0,  0,  0,  0,  0},    //  11001110, 00110001,  5 
    { 207, TYPE_2A,    8,  9, 10,  6,  0,  0,  0,  0,  0,  0,  0,  0},    //  11001111, 00110000,  6 
    { 208, TYPE_3A,    9,  5,  6, 11, 12,  0,  0,  0,  0,  0,  0,  0},    //  11010000, 11010000,  5  
    { 209, TYPE_4G,    6, 11, 12,  4,  1,  5,  0,  0,  0,  0,  0,  0},    //  11010001, 00101110,  4 
    { 210, TYPE_4D,    1,  2, 10,  5,  9, 12, 11,  6,  0,  0,  0,  0},    //  11010010, 00101101,  4 
    { 211, TYPE_3B,    5, 10,  2,  4, 12, 11,  6,  0,  0,  0,  0,  0},    //  11010011, 00101100,  5 
    { 212, TYPE_4F,    5,  9, 12,  3,  2,  6,  0,  0,  0,  0,  0,  0},    //  11010100, 00101011,  4 
    { 213, TYPE_3B,   12,  3,  2,  6,  5,  1,  4,  0,  0,  0,  0,  0},    //  11010101, 00101010,  5 
    { 214, TYPE_3B,    6,  5,  9, 12,  3,  1, 10,  0,  0,  0,  0,  0},    //  11010110, 00101001,  5 
    { 215, TYPE_2C,   12,  3,  4, 10,  6,  5,  0,  0,  0,  0,  0,  0},    //  11010111, 00101000,  6 
    { 216, TYPE_4B,    4,  3, 11,  6,  5,  9,  0,  0,  0,  0,  0,  0},    //  11011000, 00100111,  4 
    { 217, TYPE_3A,    3, 11,  6,  5,  1,  0,  0,  0,  0,  0,  0,  0},    //  11011001, 00100110,  5 
    { 218, TYPE_3C,    1,  2, 10,  4,  3, 11,  6,  5,  9,  0,  0,  0},    //  11011010, 00100101,  5 
    { 219, TYPE_2B,    3, 11,  6,  5, 10,  2,  0,  0,  0,  0,  0,  0},    //  11011011, 00100100,  6 
    { 220, TYPE_3A,    6,  5,  9,  4,  2,  0,  0,  0,  0,  0,  0,  0},    //  11011100, 00100011,  5 
    { 221, TYPE_2A,    1,  2,  6,  5,  0,  0,  0,  0,  0,  0,  0,  0},    //  11011101, 00100010,  6 
    { 222, TYPE_2B,    4,  1, 10,  6,  5,  9,  0,  0,  0,  0,  0,  0},    //  11011110, 00100001,  6 
    { 223, TYPE_1A,    5, 10,  6,  0,  0,  0,  0,  0,  0,  0,  0,  0},    //  11011111, 00100000,  7 
    { 224, TYPE_3A,   12,  8,  5, 10, 11,  0,  0,  0,  0,  0,  0,  0},    //  11100000, 11100000,  5  
    { 225, TYPE_4D,    4,  1,  9,  8, 12, 11, 10,  5,  0,  0,  0,  0},    //  11100001, 00011110,  4 
    { 226, TYPE_4F,    8, 12, 11,  2,  1,  5,  0,  0,  0,  0,  0,  0},    //  11100010, 00011101,  4 
    { 227, TYPE_3B,    5,  8, 12, 11,  2,  4,  9,  0,  0,  0,  0,  0},    //  11100011, 00011100,  5 
    { 228, TYPE_4B,   10,  5,  8, 12,  3,  2,  0,  0,  0,  0,  0,  0},    //  11100100, 00011011,  4 
    { 229, TYPE_3C,    4,  1,  9,  3,  2, 10,  5,  8, 12,  0,  0,  0},    //  11100101, 00011010,  5 
    { 230, TYPE_3A,    5,  8, 12,  3,  1,  0,  0,  0,  0,  0,  0,  0},    //  11100110, 00011001,  5 
    { 231, TYPE_2B,    3,  4,  9,  5,  8, 12,  0,  0,  0,  0,  0,  0},    //  11100111, 00011000,  6 
    { 232, TYPE_4G,    5, 10, 11,  3,  4,  8,  0,  0,  0,  0,  0,  0},    //  11101000, 00010111,  4 
    { 233, TYPE_3B,    8,  9,  1,  3, 11, 10,  5,  0,  0,  0,  0,  0},    //  11101001, 00010110,  5 
    { 234, TYPE_3B,   11,  2,  1,  5,  8,  4,  3,  0,  0,  0,  0,  0},    //  11101010, 00010101,  5 
    { 235, TYPE_2C,   11,  2,  3,  9,  5,  8,  0,  0,  0,  0,  0,  0},    //  11101011, 00010100,  6 
    { 236, TYPE_3A,    2, 10,  5,  8,  4,  0,  0,  0,  0,  0,  0,  0},    //  11101100, 00010011,  5 
    { 237, TYPE_2B,    2, 10,  5,  8,  9,  1,  0,  0,  0,  0,  0,  0},    //  11101101, 00010010,  6 
    { 238, TYPE_2A,    4,  1,  5,  8,  0,  0,  0,  0,  0,  0,  0,  0},    //  11101110, 00010001,  6 
    { 239, TYPE_1A,    5,  8,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0},    //  11101111, 00010000,  7 
    { 240, TYPE_4A,    9, 10, 11, 12,  0,  0,  0,  0,  0,  0,  0,  0},    //  11110000, 00001111,  4 
    { 241, TYPE_3A,   10,  1,  4, 12, 11,  0,  0,  0,  0,  0,  0,  0},    //  11110001, 00001110,  5 
    { 242, TYPE_3A,   11,  2,  1,  9, 12,  0,  0,  0,  0,  0,  0,  0},    //  11110010, 00001101,  5
    { 243, TYPE_2A,   11,  2,  4, 12,  0,  0,  0,  0,  0,  0,  0,  0},    //  11110011, 00001100,  6 
    { 244, TYPE_3A,   12,  3,  2, 10,  9,  0,  0,  0,  0,  0,  0,  0},    //  11110100, 00001011,  5 
    { 245, TYPE_2B,   10,  1,  4, 12,  3,  2,  0,  0,  0,  0,  0,  0},    //  11110101, 00001010,  6 
    { 246, TYPE_2A,   12,  3,  1,  9,  0,  0,  0,  0,  0,  0,  0,  0},    //  11110110, 00001001,  6 
    { 247, TYPE_1A,    3,  4, 12,  0,  0,  0,  0,  0,  0,  0,  0,  0},    //  11110111, 00001000,  7 
    { 248, TYPE_3A,    9,  4,  3, 11, 10,  0,  0,  0,  0,  0,  0,  0},    //  11111000, 00000111,  5 
    { 249, TYPE_2A,   10,  1,  3, 11,  0,  0,  0,  0,  0,  0,  0,  0},    //  11111001, 00000110,  6 
    { 250, TYPE_2B,    9,  4,  3, 11,  2,  1,  0,  0,  0,  0,  0,  0},    //  11111010, 00000101,  6 
    { 251, TYPE_1A,    2,  3, 11,  0,  0,  0,  0,  0,  0,  0,  0,  0},    //  11111011, 00000100,  7 
    { 252, TYPE_2A,    9,  4,  2, 10,  0,  0,  0,  0,  0,  0,  0,  0},    //  11111100, 00000011,  6 
    { 253, TYPE_1A,    1,  2, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0},    //  11111101, 00000010,  7 
    { 254, TYPE_1A,    4,  1,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0},    //  11111110, 00000001,  7 
    { 255, TYPE_0A,    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},    //  11111111, 00000000,  8 
};

// ------------------------------------------------------------
Plot3DF::Plot3DF()
{
	// use default values
	DefInputsF();
	SetIniHeader("Implicit");
}

// ------------------------------------------------------------
Plot3DF::~Plot3DF()
{
	FreeTriangles();
}

// ------------------------------------------------------------
void Plot3DF::DefInputsF(void)
{
	FreeTriangles();	// free memory and clear pointers

	// initialize surface equation
	m_sSurfaceName   = DEFAULT_F_NAME;
 	m_sFuncEquation  = DEFAULT_F_EQUATION;
 	m_sREquation     = DEFAULT_F_RED;
 	m_sGEquation     = DEFAULT_F_GREEN;
 	m_sBEquation     = DEFAULT_F_BLUE;
	m_sC1 = "1";
	m_sC2 = "1";
	m_sC3 = "1";
	m_sC4 = "1";
	m_sC5 = "1";
	m_sC6 = "1";
	m_sC7 = "1";
	m_sC8 = "1";

	// init parameters
	m_nxplanes = DEFAULT_LINE_COUNT;
	m_nyplanes = DEFAULT_LINE_COUNT;
	m_nzplanes = DEFAULT_LINE_COUNT;
	m_nxMesh   = DEFAULT_MESH_SIZE;
	m_nyMesh   = DEFAULT_MESH_SIZE;
	m_nzMesh   = DEFAULT_MESH_SIZE;
	m_draw_xlines = 1;
	m_draw_ylines = 0;
	m_draw_zlines = 0;

	// set axis ranges
	m_xmin=-1.;
	m_xmax =1.;
	m_ymin=-1.;
	m_ymax= 1.;
	m_zmin=-1.;
	m_zmax= 1.;
}

// ------------------------------------------------------------
// returns: 0=ok
int  Plot3DF::InitEquations(void)
{
	int fcol, rcol, gcol, bcol;

	// check input parameters
	if (m_xmin >= m_xmax)
	{
		m_is_equation_ok = 0;
		theApp.SetStatusString("Error: Xmin >= Xmax");
		return(1);
	}
	if (m_ymin >= m_ymax)
	{
		m_is_equation_ok = 0;
		theApp.SetStatusString("Error: Ymin >= Ymax");
		return(1);
	}
	if (m_zmin >= m_zmax)
	{
		m_is_equation_ok = 0;
		theApp.SetStatusString("Error: Zmin >= Zmax");
		return(1);
	}

	// update calculator - load constants and program
 	fcol = m_FuncPlotCalc.LoadProgram("F(x,y,z)",(LPCTSTR)m_sFuncEquation,1,
			(LPCTSTR)m_sC1,(LPCTSTR)m_sC2,(LPCTSTR)m_sC3,(LPCTSTR)m_sC4,
			(LPCTSTR)m_sC5,(LPCTSTR)m_sC6,(LPCTSTR)m_sC7,(LPCTSTR)m_sC8);

 	rcol = m_RPlotCalc.LoadProgram("R(x,y,z)",(LPCTSTR)m_sREquation,1,
			(LPCTSTR)m_sC1,(LPCTSTR)m_sC2,(LPCTSTR)m_sC3,(LPCTSTR)m_sC4,
			(LPCTSTR)m_sC5,(LPCTSTR)m_sC6,(LPCTSTR)m_sC7,(LPCTSTR)m_sC8);

 	gcol = m_GPlotCalc.LoadProgram("G(x,y,z)",(LPCTSTR)m_sGEquation,1,
			(LPCTSTR)m_sC1,(LPCTSTR)m_sC2,(LPCTSTR)m_sC3,(LPCTSTR)m_sC4,
			(LPCTSTR)m_sC5,(LPCTSTR)m_sC6,(LPCTSTR)m_sC7,(LPCTSTR)m_sC8);

 	bcol = m_BPlotCalc.LoadProgram("B(x,y,z)",(LPCTSTR)m_sBEquation,1,
			(LPCTSTR)m_sC1,(LPCTSTR)m_sC2,(LPCTSTR)m_sC3,(LPCTSTR)m_sC4,
			(LPCTSTR)m_sC5,(LPCTSTR)m_sC6,(LPCTSTR)m_sC7,(LPCTSTR)m_sC8);

	m_is_equation_ok = (fcol | rcol | gcol | bcol) ? 0 : 1;

	// show status string
	if (fcol)
	 	m_sEquationStatus = m_FuncPlotCalc.GetErrString();
	else if (rcol)
	 	m_sEquationStatus = m_RPlotCalc.GetErrString();
	else if (gcol)
	 	m_sEquationStatus = m_GPlotCalc.GetErrString();
	else
	 	m_sEquationStatus = m_BPlotCalc.GetErrString();

	if (!m_is_equation_ok) theApp.SetStatusString(m_sEquationStatus);
	return(m_is_equation_ok?0:1);
}

// ------------------------------------------------------------
// returns 0=ok
int  Plot3DF::InitPlotF(void)
{
	FreeTriangles();
	if (InitEquations()) return(1);
	if (m_nxplanes < 2) m_nxplanes = 2;
	if (m_nyplanes < 2) m_nyplanes = 2;
	if (m_nzplanes < 2) m_nzplanes = 2;
	return(0);
}

// ------------------------------------------------------------
// plot the surface
int Plot3DF::Plot(CWnd* pWnd)
{
	time_t begTime, endTime;

	SetWnd(pWnd);

	theApp.SetStatusString("Render Begin");
	time(&begTime);

	if (InitPlotF()) return(2);

	WinBegPlot();

	GenTriangles();
	GenXLines();
	GenYLines();
	GenZLines();

	WinEndPlot();
	time(&endTime);

	// calculate render time
	unsigned minutes, seconds;
	CalcDiffTime(begTime,endTime,&minutes,&seconds);

	// show rendering time
	CString sRenderTime;
	sRenderTime.Format("Render Complete    %u:%02u (m:s)", minutes, seconds);
	theApp.SetStatusString(sRenderTime);

	return(0);
}

// ------------------------------------------------------------
int Plot3DF::GenXLines()
{
	CString sPercent;
	Point3DT pt1, pt2;
	Triangle3DT* pTri;
	unsigned i,j,stat,percent_complete;
	double x,dx;

	if (!m_draw_xlines || m_nxplanes<2) return(0);
	x  = m_xmin;
	dx = (m_xmax - m_xmin)/m_nxplanes;
 	for (i=0; i<m_nxplanes; i++,x+=dx)
 	{
		if (IsAborted()) break;

		// loop through all triangles
		for (j=0; j<TriangleCount(); j++)
		{
			pTri = GetTrianglePtr(j);
			stat = pTri->XSlice(x,&pt1,&pt2);
			if (!stat)
			{
				AddLine(pt1.m_xf,pt1.m_yf,pt1.m_zf,pt2.m_xf,pt2.m_yf,pt2.m_zf);
			}
		}

		// show percent complete status
		percent_complete = (int)(100.*(i+1)/m_nxplanes);
		sPercent.Format("Generate X Lines: %u%% complete", percent_complete);
		theApp.SetStatusString(sPercent);
 	} // for i
	return(0);
}

// ------------------------------------------------------------
int Plot3DF::GenYLines()
{
	CString sPercent;
	Point3DT pt1, pt2;
	Triangle3DT* pTri;
	unsigned i,j,stat,percent_complete;
	double y,dy;

	if (!m_draw_ylines || m_nyplanes<2) return(0);
	y  = m_ymin;
	dy = (m_ymax - m_ymin)/m_nyplanes;
 	for (i=0; i<m_nyplanes; i++,y+=dy)
 	{
		if (IsAborted()) break;

		// loop through all triangles
		for (j=0; j<TriangleCount(); j++)
		{
			pTri = GetTrianglePtr(j);
			stat = pTri->YSlice(y,&pt1,&pt2);
			if (!stat)
			{
				AddLine(pt1.m_xf,pt1.m_yf,pt1.m_zf,pt2.m_xf,pt2.m_yf,pt2.m_zf);
			}
		}

		// show percent complete status
		percent_complete = (int)(100.*(i+1)/m_nyplanes);
		sPercent.Format("Generate Y Lines: %u%% complete", percent_complete);
		theApp.SetStatusString(sPercent);
 	} // for i
	return(0);
}

// ------------------------------------------------------------
int Plot3DF::GenZLines()
{
	CString sPercent;
	Point3DT pt1, pt2;
	Triangle3DT* pTri;
	unsigned i,j,stat,percent_complete;
	double z,dz;

	if (!m_draw_zlines || m_nzplanes<2) return(0);
	z  = m_zmin;
	dz = (m_zmax - m_zmin)/m_nzplanes;
 	for (i=0; i<m_nzplanes; i++,z+=dz)
 	{
		if (IsAborted()) break;

		// loop through all triangles
		for (j=0; j<TriangleCount(); j++)
		{
			pTri = GetTrianglePtr(j);
			stat = pTri->ZSlice(z,&pt1,&pt2);
			if (!stat)
			{
				AddLine(pt1.m_xf,pt1.m_yf,pt1.m_zf,pt2.m_xf,pt2.m_yf,pt2.m_zf);
			}
		}

		// show percent complete status
		percent_complete = (int)(100.*(i+1)/m_nzplanes);
		sPercent.Format("Generate Z Lines: %u%% complete", percent_complete);
		theApp.SetStatusString(sPercent);
 	} // for iy
	return(0);
}

// ------------------------------------------------------------
// returns: 0=ok, 1=can't open file
int  Plot3DF::ReadFile()
{
	if (!DoesFileExist(m_FilePath)) return(1);

	// surface definition
	m_sSurfaceName  = GetIniStr   ("Name",          	DEFAULT_F_NAME    );
	m_sC1           = GetIniStr   ("C1",	          	""    );
	m_sC2           = GetIniStr   ("C2",	          	""    );
	m_sC3           = GetIniStr   ("C3",	          	""    );
	m_sC4           = GetIniStr   ("C4",	          	""    );
	m_sC5           = GetIniStr   ("C5",	          	""    );
	m_sC6           = GetIniStr   ("C6",	          	""    );
	m_sC7           = GetIniStr   ("C7",	          	""    );
	m_sC8           = GetIniStr   ("C8",	          	""    );
	m_sFuncEquation = GetIniStr   ("PlotEquation", 	    DEFAULT_F_EQUATION );
	m_sREquation    = GetIniStr   ("RedEquation", 	    DEFAULT_F_RED      );
	m_sGEquation    = GetIniStr   ("GreenEquation", 	DEFAULT_F_GREEN    );
	m_sBEquation    = GetIniStr   ("BlueEquation", 	    DEFAULT_F_BLUE     );

	// common parameters
	m_zrotate       = GetIniDouble("ZRotate",       	30.0  );
	m_xytilt        = GetIniDouble("XYTilt",        	60.0  );
	m_scale         = GetIniDouble("PlotScale",        100.0  );
	m_line_color    = GetIniLong  ("LineColor",   DEF_LINE_COLOR  );
	m_back_color    = GetIniLong  ("BackColor",   DEF_BKGND_COLOR );
	m_is_color      = GetIniLong  ("ShowColor",     	 1    );
	m_show_axis     = GetIniLong  ("ShowAxis",      	 0    );

	// specific parameters
	m_xmin          = GetIniDouble("XMin",              -1.  );
	m_xmax          = GetIniDouble("XMax",               1.  );
	m_ymin          = GetIniDouble("YMin",              -1.  );
 	m_ymax          = GetIniDouble("YMax",               1.  );
	m_zmin          = GetIniDouble("ZMin",              -1.  );
 	m_zmax          = GetIniDouble("ZMax",               1.  );
 	m_draw_xlines   = GetIniLong   ("DrawXLines",        1   );
 	m_draw_ylines   = GetIniLong   ("DrawYLines",        0   );
 	m_draw_zlines   = GetIniLong   ("DrawZLines",        0   );
	m_nxMesh        = GetIniLong   ("nXMesh",          DEFAULT_MESH_SIZE  );
	m_nyMesh        = GetIniLong   ("nYMesh",          DEFAULT_MESH_SIZE  );
	m_nzMesh        = GetIniLong   ("nZMesh",          DEFAULT_MESH_SIZE  );
	m_nxplanes      = GetIniLong   ("nXPlanes",        DEFAULT_LINE_COUNT );
	m_nyplanes      = GetIniLong   ("nYPlanes",        DEFAULT_LINE_COUNT );
	m_nzplanes      = GetIniLong   ("nZPlanes",        DEFAULT_LINE_COUNT );

	return(0);
}

// ------------------------------------------------------------
int  Plot3DF::WriteFile()
{
	// surface definition
	SetIniStr   ("Name",          m_sSurfaceName);
	SetIniStr   ("C1",	          m_sC1);
	SetIniStr   ("C2",	          m_sC2);
	SetIniStr   ("C3",	          m_sC3);
	SetIniStr   ("C4",	          m_sC4);
	SetIniStr   ("C5",	          m_sC5);
	SetIniStr   ("C6",	          m_sC6);
	SetIniStr   ("C7",	          m_sC7);
	SetIniStr   ("C8",	          m_sC8);
 	SetIniStr   ("PlotEquation",  m_sFuncEquation);
 	SetIniStr   ("RedEquation",   m_sREquation);
 	SetIniStr   ("GreenEquation", m_sGEquation);
 	SetIniStr   ("BlueEquation",  m_sBEquation);

	// common parameters
	SetIniDouble("ZRotate",       m_zrotate);
	SetIniDouble("XYTilt",        m_xytilt);
	SetIniDouble("PlotScale",     m_scale);
	SetIniLong  ("LineColor",     m_line_color);
	SetIniLong  ("BackColor",     m_back_color);
	SetIniLong  ("ShowColor",     m_is_color);
 	SetIniLong  ("ShowAxis",      m_show_axis);

	// specific parameters
	SetIniDouble("XMin",          m_xmin);
	SetIniDouble("XMax",          m_xmax);
	SetIniDouble("YMin",          m_ymin);
	SetIniDouble("YMax",          m_ymax);
	SetIniDouble("ZMin",          m_zmin);
	SetIniDouble("ZMax",          m_zmax);
 	SetIniLong   ("DrawXLines",   m_draw_xlines);
 	SetIniLong   ("DrawYLines",   m_draw_ylines);
 	SetIniLong   ("DrawZLines",   m_draw_zlines);
	SetIniLong   ("nXMesh",       m_nxMesh);
	SetIniLong   ("nYMesh",       m_nyMesh);
	SetIniLong   ("nZMesh",       m_nzMesh);
	SetIniLong   ("nXPlanes",     m_nxplanes);
	SetIniLong   ("nYPlanes",     m_nyplanes);
	SetIniLong   ("nZPlanes",     m_nzplanes);

	return(0);
}

// ------------------------------------------------------------
#define FuncIndex(i,j,k)  (m_nzMesh*((i)*m_nyMesh + (j)) + (k))

void Plot3DF::GenTriangles(void)
{
	CString sPercent;
	double f1,x,y,z;
	double dx,dy,dz;
	unsigned percent_complete;
	unsigned int i,j,k,i1,j1,k1;
	unsigned int nx1,ny1,nz1;
	unsigned int lutValue;
	unsigned char* pFuncMesh;
	unsigned int   ntMesh;	// size of pFuncMesh
  #ifdef DEBUG_HISTOGRAM
	static unsigned int nHist[256] = { 0 };
  #endif

	// calculate deltas
	if (m_nxMesh<3) m_nxMesh=3;
	if (m_nyMesh<3) m_nyMesh=3;
	if (m_nzMesh<3) m_nzMesh=3;
	ntMesh = m_nxMesh * m_nyMesh * m_nzMesh;
	dx = (m_xmax-m_xmin)/(m_nxMesh-1);
	dy = (m_ymax-m_ymin)/(m_nyMesh-1);
	dz = (m_zmax-m_zmin)/(m_nzMesh-1);

	// allocate memory for error function mesh
	pFuncMesh = new unsigned char [ntMesh];
	memset(pFuncMesh,0,ntMesh);

	// generate error function mesh
	for (i=0,x=m_xmin; i<m_nxMesh;i++,x+=dx)
	{
		for (j=0,y=m_ymin;j<m_nyMesh;j++,y+=dy)
		{
			if (IsAborted()) break;
			for (k=0,z=m_zmin;k<m_nzMesh;k++,z+=dz)
			{
				f1 = Func(x,y,z);
				if (f1>=0.) pFuncMesh[FuncIndex(i,j,k)]=1;
			} // for k
		} // for j

		// show percent complete status
		percent_complete = (int)(100.*((i+1.001)/m_nxMesh));
		sPercent.Format("Generating Mesh: %u%% complete", percent_complete);
		theApp.SetStatusString(sPercent);
	} // for i

	unsigned n0,n1,nother;
	n0 = n1 = nother = 0;
	for (i=0; i<ntMesh; i++)
	{
		switch(pFuncMesh[i])
		{
		case 0: n0++; break;
		case 1: n1++; break;
		default : nother++; break;
		} // switch
	}

	// calculate triangles
	nx1 = m_nxMesh-1;
	ny1 = m_nyMesh-1;
	nz1 = m_nzMesh-1;
	for (i=0,x=m_xmin; i<nx1; x+=dx)
	{
		i1 = i + 1;
		for (j=0,y=m_ymin;j<ny1;y+=dy)
		{
			if (IsAborted()) break;
			j1 = j + 1;
			for (k=0,z=m_zmin;k<nz1;z+=dz)
			{
				k1 = k + 1;
				lutValue =  (pFuncMesh[FuncIndex(i , j , k1)]   ) |
						    (pFuncMesh[FuncIndex(i1, j , k1)]<<1) |
							(pFuncMesh[FuncIndex(i1, j1, k1)]<<2) |
							(pFuncMesh[FuncIndex(i , j1, k1)]<<3) |
							(pFuncMesh[FuncIndex(i , j , k )]<<4) |
							(pFuncMesh[FuncIndex(i1, j , k )]<<5) |
							(pFuncMesh[FuncIndex(i1, j1, k )]<<6) |
							(pFuncMesh[FuncIndex(i , j1, k )]<<7);

				if (lutValue != 0 && lutValue != 255)
					GenCubeTriangles(x,y,z,x+dx,y+dy,z+dz,(unsigned char)lutValue);
             #ifdef DEBUG_HISTOGRAM
				nHist[(unsigned char)lutValue]++;
             #endif
				k = k1;
			} // for k
			j = j1;
		} // for j
		i = i1;

		// show percent complete status
		percent_complete = (int)(100.*((i+.001)/nx1));
		sPercent.Format("Triangulating: %u%% complete", percent_complete);
		theApp.SetStatusString(sPercent);
	} // for i
	delete [] pFuncMesh;

  #ifdef DEBUG_HISTOGRAM
	char* fnHist = "c:\\temp\\hist.csv";
	FILE* fhHist = fopen(fnHist,"w+");
	fprintf(fhHist,"Bin,Count\n");
	for (i=0; i<256; i++)
	{
		fprintf(fhHist,"%u,%u\n", i, nHist[i]);
	}
	fclose(fhHist);
  #endif
}

// ---------------------------------------------------------------------------------------
Point3DT Plot3DF::FindLineInstersection(double x1,double y1,double z1,double x2,double y2,double z2)
{
	Point3DT vm;
	double x,y,z,f,f2;
	int i;

	// binary search to pin point x,y,z location
	x = x2;
	y = y2;
	z = z2;
	f2 = Func(x,y,z);
	for (i=0;i<10;i++)
	{
		x = (x1+x2)/2.;
		y = (y1+y2)/2.;
		z = (z1+z2)/2.;
		f = Func(x,y,z);
		if (f*f2<=0.)
		{
			x1 = x;
			y1 = y;
			z1 = z;
		}
		else
		{
			x2 = x;
			y2 = y;
			z2 = z;
		}
	}

	vm.m_xf = x;
	vm.m_yf = y;
	vm.m_zf = z;
	vm.m_xn = 0.;
	vm.m_yn = 0.;
	vm.m_zn = 0.;
	vm.m_red   = ValidateColorValue( m_RPlotCalc.Calc(x,y,z) );
	vm.m_green = ValidateColorValue( m_GPlotCalc.Calc(x,y,z) );
	vm.m_blue  = ValidateColorValue( m_BPlotCalc.Calc(x,y,z) );
	return(vm);
}

// ------------------------------------------------------------
void Plot3DF::GenCubeTriangles(double xmin,double ymin,double zmin,double xmax,double ymax,double zmax,unsigned char index)
{
	static Point3DT pt[MAX_TRIANG_POINTS];	// avoid re-construction
	Triangle3DT* pTrngl;
	double x1,y1,z1,x2,y2,z2;
	unsigned int i,j, nLines, lineNo, nTriangles, triType,i0,i1,i2;
	unsigned int v1,v2;

	nLines = g_cubeData[index].lineCount;
	for (i=0; i<nLines; i++)
	{
		lineNo = g_cubeData[index].lineNo[i];
		v1 = g_cubeLine[lineNo].vertex1;
		v2 = g_cubeLine[lineNo].vertex2;
		x1 = g_cubeVertex[v1].x>0 ? xmax : xmin;
		y1 = g_cubeVertex[v1].y>0 ? ymax : ymin;
		z1 = g_cubeVertex[v1].z>0 ? zmax : zmin;
		x2 = g_cubeVertex[v2].x>0 ? xmax : xmin;
		y2 = g_cubeVertex[v2].y>0 ? ymax : ymin;
		z2 = g_cubeVertex[v2].z>0 ? zmax : zmin;
		pt[i] = FindLineInstersection(x1,y1,z1,x2,y2,z2);
	}

	triType = g_cubeData[index].triangType;
	nTriangles = g_triangleData[triType].nTriangles;
	for (i=j=0; i<nTriangles; i++)
	{
		i0 = g_triangleData[triType].pointIndex[j++];
		i1 = g_triangleData[triType].pointIndex[j++];
		i2 = g_triangleData[triType].pointIndex[j++];
		pTrngl = AddTriangle(&pt[i0],&pt[i1],&pt[i2]);
	}
}

// ------------------------------------------------------------
// calculate unit vector normal to three points
void CalcNormalUnitVector(double x1,double y1,double z1,double x2,double y2,double z2,double x3,double y3,double z3,double* xn,double* yn,double* zn)
{
	double nx,ny,nz,len,dx1,dy1,dz1,dx2,dy2,dz2;

	// calculate normal surface vector at the point
	dx1 = x2 - x1;
	dy1 = y2 - y1;
	dz1 = z2 - z1;
	dx2 = x3 - x1;
	dy2 = y3 - y1;
	dz2 = z3 - z1;

	// cross product
	nx =  dy1*dz2 - dy2*dz1;
	ny = -dx1*dz2 + dx2*dz1;
	nz =  dx1*dy2 - dx2*dy1;
	len = sqrt(nx*nx+ny*ny+nz*nz);
	if (len == 0.0)
	{
		nx = ny = nz = 0.;
	}
	else
	{
		// unit normal vector
		nx = nx/len;
		ny = ny/len;
		nz = nz/len;
	}
	*xn = nx;
	*yn = ny;
	*zn = nz;
}

// ------------------------------------------------------------
// generate normal vectors for each triangle point
void Plot3DF::CalcNormVectors(void)
{
	#define DELTA_DERIVATIVE	(100.)	// delta for calculating derivatives
	static int s_index[3][3] = { 0,1,2, 1,2,0, 2,0,1 };
	Triangle3DT* pTri;
	Point3DT  pnta, pntb;
	Point3DT* pnt1;
	Point3DT* pnt2;
	Point3DT* pnt3;
	double xs,ys,zs;
	double xa=0.,ya=0.,za=0.,fa,xb=0.,yb=0.,zb=0.,fb;
	double xnt=0.,ynt=0.,znt=0.;
	double nx,ny,nz,dx,dy,dz,len;
	unsigned i,j,k,nt,valid2=0,valid3=0,noFinds=0;

	// loop through each triangle
	nt = TriangleCount();
	for (i=0; i<nt; i++)
	{
		pTri = GetTrianglePtr(i);
		for (j=0; j<3; j++)
		{
			// get three points of triangle
			pnt1 = pTri->GetPoint(s_index[j][0]);
			pnt2 = pTri->GetPoint(s_index[j][1]);
			pnt3 = pTri->GetPoint(s_index[j][2]);

			// calculate normal vector to triangle (only on first time)
			if (j==0)
			{
				CalcNormalUnitVector(pnt1->m_xf, pnt1->m_yf, pnt1->m_zf,
									 pnt2->m_xf, pnt2->m_yf, pnt2->m_zf,
									 pnt3->m_xf, pnt3->m_yf, pnt3->m_zf,
									 &xnt,&ynt,&znt);
			}

			// calculate a point along triangle side1
			dx = (pnt2->m_xf - pnt1->m_xf);
			dy = (pnt2->m_yf - pnt1->m_yf);
			dz = (pnt2->m_zf - pnt1->m_zf);
			xs = pnt1->m_xf + dx/DELTA_DERIVATIVE;
			ys = pnt1->m_yf + dy/DELTA_DERIVATIVE;
			zs = pnt1->m_zf + dz/DELTA_DERIVATIVE;
			len = sqrt(dx*dx + dy*dy + dz*dz)/DELTA_DERIVATIVE;
			dx = xnt*len;
			dy = ynt*len;
			dz = znt*len;
			// find two points with a sign change
			for (k=1;k<100;k++)
			{
				// point a
				xa = xs + dx*k;
				ya = ys + dy*k;
				za = zs + dz*k;
				fa = Func(xa,ya,za);
				// point b
				xb = xs - dx*k;
				yb = ys - dy*k;
				zb = zs - dz*k;
				fb = Func(xb,yb,zb);
				// found sign change?
				valid2 = (fa*fb <= 0.0) ? 1 : 0;
				if (valid2) break;
			}
			// if two points not found, use triangle normal vector
			if (!valid2)
			{
				pnt1->SetNormVect(xnt,ynt,znt);	// use normal vector to triangle
				noFinds++;
				continue;
			}
			pnta = FindLineInstersection(xa,ya,za,xb,yb,zb);

			// calculate a point along triangle side2
			dx = (pnt3->m_xf - pnt1->m_xf);
			dy = (pnt3->m_yf - pnt1->m_yf);
			dz = (pnt3->m_zf - pnt1->m_zf);
			xs = pnt1->m_xf + dx/DELTA_DERIVATIVE;
			ys = pnt1->m_yf + dy/DELTA_DERIVATIVE;
			zs = pnt1->m_zf + dz/DELTA_DERIVATIVE;
			len = sqrt(dx*dx + dy*dy + dz*dz)/DELTA_DERIVATIVE;
			dx = xnt*len;
			dy = ynt*len;
			dz = znt*len;
			// find two points with a sign change
			for (k=1;k<100;k++)
			{
				// point a
				xa = xs + dx*k;
				ya = ys + dy*k;
				za = zs + dz*k;
				fa = Func(xa,ya,za);
				// point b
				xb = xs - dx*k;
				yb = ys - dy*k;
				zb = zs - dz*k;
				fb = Func(xb,yb,zb);
				// found sign change?
				valid3 = (fa*fb <= 0.0) ? 1 : 0;
				if (valid3) break;
			}
			// if two points not found, use triangle normal vector
			if (!valid3)
			{
				pnt1->SetNormVect(xnt,ynt,znt);	// use normal vector to triangle
				noFinds++;
				continue;
			}
			pntb = FindLineInstersection(xa,ya,za,xb,yb,zb);

			// calculate normal surface vector at the point
			CalcNormalUnitVector(pnt1->m_xf, pnt1->m_yf, pnt1->m_zf,
								 pnta.m_xf,  pnta.m_yf,  pnta.m_zf,
								 pntb.m_xf,  pntb.m_yf,  pntb.m_zf,
								 &nx,&ny,&nz);

			// store the unit normal vector
			pnt1->SetNormVect(nx,ny,nz);
		} // for j

	} // for i
	noFinds++;
}

// ------------------------------------------------------------
// export file to Persistence-of-Vision
int Plot3DF::ExportPOV(CString povFilePath,CString sPovObjectName)
{
	CString sPovTextureName = "Aluminum";
	Triangle3DT* pTri;
	Point3DT* Pnt1;
	Point3DT* Pnt2;
	Point3DT* Pnt3;
	int is_color=m_is_color;
	double xo,yo,zo; // object centroid
	double xc,yc,zc; // camera coordinate
	double xsky,ysky,zsky; // unit vector point to sky
	double xat,yat,zat; // vector pointing from camera to object centroid
	double xright,yright,zright; // unit vector pointing to right side of view
	double red_bg, green_bg, blue_bg; // color components
	double xlight[3], ylight[3], zlight[3]; // coordinates of light sources
	double at_dist;
	unsigned i,nt,nLines;
	long bgcolor;
	FILE* fhpov=0;

	if (!IsRendered()) return(0);

	CalcTransMatrix(m_xyMouseAngle,m_zMouseAngle);	// use current mouse viewing
	CalcNormVectors();

	// open file for writing
	fhpov = fopen((LPCTSTR)povFilePath,"w");
	if (fhpov == NULL) return(1);

	// calculate background color values
	bgcolor  = GetBackColor();
	red_bg   = (double)GetRValue(bgcolor)/255.;
	green_bg = (double)GetGValue(bgcolor)/255.;
	blue_bg  = (double)GetBValue(bgcolor)/255.;

	// calculate camera and object coordinates
	GetCentroid(&xo,&yo,&zo); // get center of object
	GetPOVCamera(&xc,&yc,&zc);
	zc = -zc; // POV is a lefty
	zo = -zo; // POV is a lefty

	// calclulate sky unit vector
	xsky = xof(0., 1., 0.) - xof(0., 0., 0.);
	ysky = yof(0., 1., 0.) - yof(0., 0., 0.);
	zsky = zof(0., 1., 0.) - zof(0., 0., 0.);
	zsky = -zsky; // POV uses a left-hand coordinate system

	// calculate right unit vector
	xright = xof(1., 0., 0.) - xof(0., 0., 0.);
	yright = yof(1., 0., 0.) - yof(0., 0., 0.);
	zright = zof(1., 0., 0.) - zof(0., 0., 0.);
	zright = -zright; // POV is a lefty

	// calculate look_at vector
	xat = xc-xo;
	yat = yc-yo;
	zat = zc-zo;
	at_dist = sqrt(xat*xat+yat*yat+zat*zat); // distance from camera to object centroid

	// calculate light source coordinates
	// light#0
	xlight[0] = xo + (xat)*.6 + (xsky*at_dist)*0.6 + (xright*at_dist)*0.6;
	ylight[0] = yo + (yat)*.6 + (ysky*at_dist)*0.6 + (yright*at_dist)*0.6;
	zlight[0] = zo + (zat)*.6 + (zsky*at_dist)*0.6 + (zright*at_dist)*0.6;
	// light#1
	xlight[1] = xo + (xat)*.6 + (xsky*at_dist)*0.6 - (xright*at_dist)*0.6;
	ylight[1] = yo + (yat)*.6 + (ysky*at_dist)*0.6 - (yright*at_dist)*0.6;
	zlight[1] = zo + (zat)*.6 + (zsky*at_dist)*0.6 - (zright*at_dist)*0.6;
	// light#2
	xlight[2] = xo + (xat)*.9 - (xsky*at_dist)*0.6 + (xright*at_dist)*.2;
	ylight[2] = yo + (yat)*.9 - (ysky*at_dist)*0.6 + (yright*at_dist)*.2;
	zlight[2] = zo + (zat)*.9 - (zsky*at_dist)*0.6 + (zright*at_dist)*.2;

	// output POV header commands
	fprintf(fhpov,"// POV Image File Generated from SurfX3D\n");
	fprintf(fhpov,"//   Surface: %s\n\n", (LPCTSTR)sPovObjectName);
	fprintf(fhpov,"#include \"colors.inc\"\n");
	fprintf(fhpov,"#include \"textures.inc\"\n\n");
	fprintf(fhpov,"camera {\n");                 
	fprintf(fhpov,"  location <%.6lf, %.6lf, %.6lf>\n",xc,yc,zc); 
	fprintf(fhpov,"  // orthographic\n"); 
	fprintf(fhpov,"  sky <%.6lf, %.6lf, %.6lf>\n",xsky,ysky,zsky); 
	fprintf(fhpov,"  look_at <%.6lf, %.6lf, %.6lf>\n",xo,yo,zo);     
	fprintf(fhpov,"}\n");                        
	fprintf(fhpov,"light_source { <%.6lf, %.6lf, %.6lf> colour White }\n",xlight[0],ylight[0],zlight[0]);
	fprintf(fhpov,"light_source { <%.6lf, %.6lf, %.6lf> colour White }\n",xlight[1],ylight[1],zlight[1]);
	fprintf(fhpov,"light_source { <%.6lf, %.6lf, %.6lf> colour White }\n",xlight[2],ylight[2],zlight[2]);
	fprintf(fhpov,"background { color rgb < %.6lf, %.6lf, %.6lf > }\n", red_bg, green_bg, blue_bg);
	fprintf(fhpov,"\n");

	// loop through each triangle
	nt = TriangleCount();
	fprintf(fhpov,"#declare SURFACE1 = union { // define the object\n");
	for (i=0; i<nt; i++)
	{
		pTri = GetTrianglePtr(i);
		Pnt1 = pTri->GetPoint(0);
		Pnt2 = pTri->GetPoint(1);
		Pnt3 = pTri->GetPoint(2);
		fprintf(fhpov," smooth_triangle {<%.6lf,%.6lf,%.6lf>,<%.6lf,%.6lf,%.6lf>,<%.6lf,%.6lf,%.6lf>,<%.6lf,%.6lf,%.6lf>,<%.6lf,%.6lf,%.6lf>,<%.6lf,%.6lf,%.6lf>",
			Pnt1->m_xf,Pnt1->m_yf,-Pnt1->m_zf, -Pnt1->m_xn,-Pnt1->m_yn,Pnt1->m_zn,
			Pnt2->m_xf,Pnt2->m_yf,-Pnt2->m_zf, -Pnt2->m_xn,-Pnt2->m_yn,Pnt2->m_zn,
			Pnt3->m_xf,Pnt3->m_yf,-Pnt3->m_zf, -Pnt3->m_xn,-Pnt3->m_yn,Pnt3->m_zn);
		if (is_color)
		{
			fprintf(fhpov," pigment {color rgb <%.6lf,%.6lf,%.6lf>}}\n",
				pTri->RedTri()  /(double)PLOT3D_MAX_COLOR,	// 0-1
				pTri->GreenTri()/(double)PLOT3D_MAX_COLOR,	// 0-1
				pTri->BlueTri() /(double)PLOT3D_MAX_COLOR);	// 0-1
		}
		else
		{
			fprintf(fhpov,"}\n");
		}

	} // for i

	// ------------------------------
	// Export Lines as thin cylinders
	// ------------------------------
	nLines = LineCount();
	if (nLines)
	{
		Line3DT* pLine;
		double lineLen,dx,dy,dz;
		double rline = (float)(GetRValue(m_line_color)/255.);
		double gline = (float)(GetGValue(m_line_color)/255.);
		double bline = (float)(GetBValue(m_line_color)/255.);
		double lineRadius = max(fabs(m_xmax-m_xmin),fabs(m_ymax-m_ymin));
		lineRadius = max(fabs(m_zmax-m_zmin),lineRadius)/POV_LINE_RADIUS;
		for (i=0; i<nLines; i++)
	 	{
			pLine = GetLinePtr(i);
			dx=pLine->m_x2-pLine->m_x1;
			dy=pLine->m_y2-pLine->m_y1;
			dz=pLine->m_z2-pLine->m_z1;
			lineLen = sqrt(dx*dx+dy*dy+dz*dz);
			if (lineLen < lineRadius) continue;	// skip degenerate line
			fprintf(fhpov," cylinder { <%10.6lf,%10.6lf,%10.6lf>,<%10.6lf,%10.6lf,%10.6lf>,%10.6lf texture {pigment {color rgb <%.6lf,%.6lf,%.6lf>}}}\n",
				pLine->m_x1, pLine->m_y1, -pLine->m_z1, pLine->m_x2, pLine->m_y2, -pLine->m_z2,lineRadius,rline,gline,bline);
		} // for i
	}

	fprintf(fhpov," texture { %s } }\n", (LPCTSTR)sPovTextureName);

	// usage
	fprintf(fhpov,"\nobject { SURFACE1 } // use the object\n");

	// cleanup
	fclose(fhpov);
	return(0);
}

// ------------------------------------------------------------
// export file to Virtual-Reality-Modeling-Language (VRML) file format
int Plot3DF::ExportVRML(CString sVrmlFilePath,CString sVrmlSurfaceName)
{
	Triangle3DT* pTri;
	Point3DT* Pnt1;
	Point3DT* Pnt2;
	Point3DT* Pnt3;
	float red=0.,green=0.,blue=0.;
	int i1,i2,i3;
	unsigned i,nt,nLines;
	FILE* fhvrml=0;

	if (!IsRendered()) return(0);

	// open file for writing
	fhvrml = fopen((LPCTSTR)sVrmlFilePath,"w");
	if (fhvrml == NULL) return(1);

	// ----------------
	// VRML File Header
	// ----------------
	nt = TriangleCount();	// number of triangles
	fprintf(fhvrml,"#VRML V2.0 utf8\n");
	fprintf(fhvrml,"# Generated by SurfX3D\n");
	fprintf(fhvrml,"\n");
	fprintf(fhvrml,"WorldInfo { title \"%s\" }\n", sVrmlSurfaceName);
	fprintf(fhvrml,"\n");

	// background color
	red   = (float)(GetRValue(m_back_color)/255.);
	green = (float)(GetGValue(m_back_color)/255.);
	blue  = (float)(GetBValue(m_back_color)/255.);

	fprintf(fhvrml,"Background {\n");
	fprintf(fhvrml,"  skyColor    [ %.4f %.4f %.4f ]", red, green, blue);
	fprintf(fhvrml,"  groundColor [ %.4f %.4f %.4f ]", red, green, blue);
	fprintf(fhvrml,"}");
	fprintf(fhvrml,"\n");

	// -------------------
	// Point Surface Shape
	// -------------------
	if (m_is_color)
	{
		fprintf(fhvrml,"DEF SURFACE1 Shape {\n");
		fprintf(fhvrml," geometry IndexedFaceSet {\n");
		fprintf(fhvrml,"   solid FALSE\n");

		// export coordinates
		fprintf(fhvrml,"   coord Coordinate {\n");
		fprintf(fhvrml,"     point [\n");
		for (i=0; i<nt; i++)
	 	{
			pTri = GetTrianglePtr(i);
			Pnt1 = pTri->GetPoint(0);
			Pnt2 = pTri->GetPoint(1);
			Pnt3 = pTri->GetPoint(2);
			fprintf(fhvrml,"      %10.6lf %10.6lf %10.6lf\n", Pnt1->m_xf, Pnt1->m_yf, Pnt1->m_zf);
			fprintf(fhvrml,"      %10.6lf %10.6lf %10.6lf\n", Pnt2->m_xf, Pnt2->m_yf, Pnt2->m_zf);
			fprintf(fhvrml,"      %10.6lf %10.6lf %10.6lf\n", Pnt3->m_xf, Pnt3->m_yf, Pnt3->m_zf);
		} // for i
		fprintf(fhvrml,"     ]\n");
		fprintf(fhvrml,"   }\n");

		// export color values
		fprintf(fhvrml,"   color Color\n");
		fprintf(fhvrml,"   {\n");
		fprintf(fhvrml,"     color [\n");
		for (i=0; i<nt; i++)
 		{
			pTri = GetTrianglePtr(i);
			Pnt1 = pTri->GetPoint(0);
			Pnt2 = pTri->GetPoint(1);
			Pnt3 = pTri->GetPoint(2);
			fprintf(fhvrml,"      %10.6lf %10.6lf %10.6lf\n", Pnt1->m_red/100., Pnt1->m_green/100., Pnt1->m_blue/100.);
			fprintf(fhvrml,"      %10.6lf %10.6lf %10.6lf\n", Pnt2->m_red/100., Pnt2->m_green/100., Pnt2->m_blue/100.);
			fprintf(fhvrml,"      %10.6lf %10.6lf %10.6lf\n", Pnt3->m_red/100., Pnt3->m_green/100., Pnt3->m_blue/100.);
		} // for i
		fprintf(fhvrml,"     ]\n");
		fprintf(fhvrml,"   }\n");
	
		// face set normal vectors
		CalcNormVectors();
		fprintf(fhvrml,"   normal Normal {\n");
		fprintf(fhvrml,"     vector [\n");
		for (i=0; i<nt; i++)
		{
			pTri = GetTrianglePtr(i);
			Pnt1 = pTri->GetPoint(0);
			Pnt2 = pTri->GetPoint(1);
			Pnt3 = pTri->GetPoint(2);
			fprintf(fhvrml,"      %10.6lf %10.6lf %10.6lf\n", Pnt1->m_xn, Pnt1->m_yn, Pnt1->m_zn);
			fprintf(fhvrml,"      %10.6lf %10.6lf %10.6lf\n", Pnt2->m_xn, Pnt2->m_yn, Pnt2->m_zn);
			fprintf(fhvrml,"      %10.6lf %10.6lf %10.6lf\n", Pnt3->m_xn, Pnt3->m_yn, Pnt3->m_zn);
		} // for i
		fprintf(fhvrml,"     ]\n");
		fprintf(fhvrml,"   }\n");
	
		// face set coordinate indexes
		fprintf(fhvrml,"   coordIndex [\n");
		for (i=i1=0; i<nt; i++,i1+=3)
	 	{
			i2 = i1+1;
			i3 = i2+1;
			fprintf(fhvrml,"      %6u %6u %6u -1\n", i1,i2,i3);
		} // for i
		fprintf(fhvrml,"   ]\n");
	
		// trailer
		fprintf(fhvrml," }\n");
		fprintf(fhvrml,"}\n");
	} // m_is_color

	// -------------------------
	// Line Color Components 0-1
	// -------------------------
	red   = (float)(GetRValue(m_line_color)/255.);
	green = (float)(GetGValue(m_line_color)/255.);
	blue  = (float)(GetBValue(m_line_color)/255.);

	// ------------
	// Export Lines
	// ------------
	nLines = LineCount();
	if (nLines)
	{
		Line3DT* pLine;
		unsigned np;

		// export lines
		fprintf(fhvrml,"DEF LINESET2 Shape {\n");
		fprintf(fhvrml," appearance Appearance { material Material { emissiveColor %.4f %.4f %.4f } }\n", red, green, blue);
		fprintf(fhvrml," geometry IndexedLineSet {\n");
		fprintf(fhvrml," coord Coordinate {\n");
		fprintf(fhvrml,"   point [\n");
		// export points
		for (i=np=0; i<nLines; i++)
	 	{
			pLine = GetLinePtr(i);
			fprintf(fhvrml,"    %10.6lf %10.6lf %10.6lf # %u\n", pLine->m_x1, pLine->m_y1, pLine->m_z1, np++);
			fprintf(fhvrml,"    %10.6lf %10.6lf %10.6lf # %u\n", pLine->m_x2, pLine->m_y2, pLine->m_z2, np++);
		} // for i
		fprintf(fhvrml,"     ]\n");	// point
		fprintf(fhvrml,"   }\n");	// coord
		fprintf(fhvrml,"   coordIndex [\n");
		for (i=np=0; i<nLines; i++,np+=2)
		{
			fprintf(fhvrml,"      %6u %6u -1\n", np,np+1);
		} // for i
		fprintf(fhvrml,"   ]\n");
		fprintf(fhvrml," }\n");
		fprintf(fhvrml,"}\n");
	}

	// -------
	// cleanup
	// -------
	fclose(fhvrml);
	return(0);
}

// ------------------------------------------------------------
// export file to Drawing Exchange File (DXF) format
int Plot3DF::ExportDXF(CString sDxfFilePath,CString sDxfSurfaceName)
{
	Triangle3DT* pTri;
	Point3DT* Pnt1;
	Point3DT* Pnt2;
	Point3DT* Pnt3;
	unsigned i,nTriangles;
	FILE* fhdxf=0;

	if (!IsRendered()) return(0);

	// open file for writing
	fhdxf = fopen((LPCTSTR)sDxfFilePath,"w");
	if (fhdxf == NULL) return(1);

	// ---------------
	// DXF File Header
	// ---------------
	fprintf(fhdxf,"999\n");
	fprintf(fhdxf,"DXF created from SurfX3D: %s\n", sDxfSurfaceName);
	fprintf(fhdxf,"0\n");
	fprintf(fhdxf,"SECTION\n");
	fprintf(fhdxf,"2\n");
	fprintf(fhdxf,"HEADER\n");
	fprintf(fhdxf,"0\n");
	fprintf(fhdxf,"ENDSEC\n");
	fprintf(fhdxf,"0\n");
	fprintf(fhdxf,"SECTION\n");
	fprintf(fhdxf,"2\n");
	fprintf(fhdxf,"TABLES\n");
	fprintf(fhdxf,"0\n");
	fprintf(fhdxf,"ENDSEC\n");
	fprintf(fhdxf,"0\n");
	fprintf(fhdxf,"SECTION\n");
	fprintf(fhdxf,"2\n");
	fprintf(fhdxf,"BLOCKS\n");
	fprintf(fhdxf,"0\n");
	fprintf(fhdxf,"ENDSEC\n");
	fprintf(fhdxf,"0\n");
	fprintf(fhdxf,"SECTION\n");
	fprintf(fhdxf,"2\n");
	fprintf(fhdxf,"ENTITIES\n");

	// ----------------
	// Output Triangles
	// ----------------
	nTriangles = TriangleCount();
	for (i=0; i<nTriangles; i++)
	{
		fprintf(fhdxf,"0\n");
		fprintf(fhdxf,"3DFACE\n");
		fprintf(fhdxf,"8\n");
		fprintf(fhdxf,"0\n");
		fprintf(fhdxf,"70\n");
		fprintf(fhdxf,"0\n");

		pTri = GetTrianglePtr(i);

		Pnt1 = pTri->GetPoint(0);
		fprintf(fhdxf,"10\n");
		fprintf(fhdxf,"%10.6lf\n",Pnt1->m_xf);
		fprintf(fhdxf,"20\n");
		fprintf(fhdxf,"%10.6lf\n",Pnt1->m_yf);
		fprintf(fhdxf,"30\n");
		fprintf(fhdxf,"%10.6lf\n",Pnt1->m_zf);

		Pnt2 = pTri->GetPoint(1);
		fprintf(fhdxf,"11\n");
		fprintf(fhdxf,"%10.6lf\n",Pnt2->m_xf);
		fprintf(fhdxf,"21\n");	  	   
		fprintf(fhdxf,"%10.6lf\n",Pnt2->m_yf);
		fprintf(fhdxf,"31\n");	  	   
		fprintf(fhdxf,"%10.6lf\n",Pnt2->m_zf);

		Pnt3 = pTri->GetPoint(2);
		fprintf(fhdxf,"12\n");
		fprintf(fhdxf,"%10.6lf\n",Pnt3->m_xf);
		fprintf(fhdxf,"22\n");	  	   
		fprintf(fhdxf,"%10.6lf\n",Pnt3->m_yf);
		fprintf(fhdxf,"32\n");	  	   
		fprintf(fhdxf,"%10.6lf\n",Pnt3->m_zf);
	} // for i

	// -------
	// cleanup
	// -------
	fprintf(fhdxf,"0\n");
	fprintf(fhdxf,"ENDSEC\n");
	fprintf(fhdxf,"0\n");
	fprintf(fhdxf,"EOF\n");

	fclose(fhdxf);
	return(0);
}

// ------------------------------------------------------------
// export file to Sterolithography (STL) file format
int Plot3DF::ExportSTL(CString sStlFilePath,CString sStlSurfaceName)
{
	Triangle3DT* pTri;
	Point3DT* Pnt1;
	Point3DT* Pnt2;
	Point3DT* Pnt3;
    STL_HEADER   stlHdr;
    STL_TRIANGLE stlTri;
    double xn, yn, zn;
	unsigned i,nTriangles;
//  double dred, dgreen, dblue;
//  unsigned red, green, blue;
//  unsigned short color;
	FILE* fhstl=0;

    if (!IsRendered()) return(0);

	// open file for writing (binary mode)
	fhstl = fopen((LPCTSTR)sStlFilePath,"wb");
	if (fhstl == NULL) return(1);
	nTriangles = TriangleCount();

	// ---------------
	// STL File Header
	// ---------------
    memset(&stlHdr, 0, sizeof(stlHdr)); // clear
	sprintf((char*)&stlHdr.hdr, "Created from SurfX3D: %s", sStlSurfaceName);
    stlHdr.nTriangles = nTriangles;
    fwrite(&stlHdr, 1, sizeof(stlHdr), fhstl);  // write header

	// ----------------
	// Output Triangles
	// ----------------
	for (i=0; i<nTriangles; i++)
	{
        // get triangle info
		pTri   = GetTrianglePtr(i);
		Pnt1   = pTri->GetPoint(0);
		Pnt2   = pTri->GetPoint(1);
		Pnt3   = pTri->GetPoint(2);
     // dred   = pTri->RedTri();   // 0-100
     // dgreen = pTri->GreenTri(); // 0-100
     // dblue  = pTri->BlueTri();  // 0-100

        // clear triangle data
        memset(&stlTri, 0, sizeof(stlTri));

        // vertex 1
        stlTri.vertex1.x = (float)Pnt1->m_xf;
        stlTri.vertex1.y = (float)Pnt1->m_yf;
        stlTri.vertex1.z = (float)Pnt1->m_zf;

        // vertex 2
        stlTri.vertex2.x = (float)Pnt2->m_xf;
        stlTri.vertex2.y = (float)Pnt2->m_yf;
        stlTri.vertex2.z = (float)Pnt2->m_zf;

        // vertex 3
        stlTri.vertex3.x = (float)Pnt3->m_xf;
        stlTri.vertex3.y = (float)Pnt3->m_yf;
        stlTri.vertex3.z = (float)Pnt3->m_zf;

        // calc normal vector
        CalcNormalUnitVector(stlTri.vertex1.x, stlTri.vertex1.y, stlTri.vertex1.z,
                             stlTri.vertex2.x, stlTri.vertex2.y, stlTri.vertex2.z,
                             stlTri.vertex3.x, stlTri.vertex3.y, stlTri.vertex3.z,
                                           &xn,              &yn,              &zn);
        stlTri.normVector.x = (float)xn;
        stlTri.normVector.y = (float)yn;
        stlTri.normVector.z = (float)zn;

        // attribute; use color 
        // scale color from 100 -> 31  (5 bits)
        // ----------------------------------
        // Note: most STL viewers do not support color
        //  1 1 1 1 1 1
        //  5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
        //  1 <--red--> <--blue-> <--blue->
        //    bit 15 0=no color, 1=color
        // ----------------------------------
        /*
        red   = (unsigned int)((dred   * 31.0)/100);
        green = (unsigned int)((dgreen * 31.0)/100);
        blue  = (unsigned int)((dblue  * 31.0)/100);
        color = (unsigned short)((0x8000) + ((red&0x1F)<<10) + ((green&0x1F)<<5) + (blue & 0x1F));
        stlTri.attribute = color;
        */

        // write triangle data to file
        fwrite(&stlTri, 1, sizeof(stlTri), fhstl);

	} // for i

	// -------
	// cleanup
	// -------
	fclose(fhstl);
	return(0);
}

/*	<><><><><><><><><><><><><>  Plot3DF.cpp  <><><><><><><><><><><><><><> */















